<<스프링 MVC프로젝트 구성>>
1. 프레임워크
	=> 완성된 소프트웨어가 아니라 어떤 문제를 해결하기 위해서 만들어진 미완의 모듈로
	   자바 개발자들이 공통으로 사용하는 기능을 미리 만들어서 제공하는 프로그램
	   (해결해야 하는 문제 - 내가 개발하는 시스템
	   					=> 교육 시스템, 예약시스템 , 인터넷뱅킹 , 쇼핑물....)
	   					
	=> 재사용이 가능한 모듈, 일반적으로 프레임워크를 이용해서 개발하는 시스템의 공통모듈들은
	프레임워크에서 제공하는 모듈을 이용해서 개발						   -----
													db 연동 , 트랜젝션처리
													뷰관리 , 로그기록 , 보안
													다국어처리 , 메시징...
													
	=> 검증받은 프로그램으로 신뢰성이 높은 시스템을 개발할 수 있다.
	=> 프레임워크를 사용하면 개발자들간의 의사소통이 가능한 프로젝트를 만들 수 있다.
	=> 대부분의 개발자들이 직접 처리하던 작업을 프레임워크가 제공해주기 때문에 유지보수나
	   시스템 개발을 위해 필요한 시간을 절약할 수 있다.
	   ----------------------------------
	   	=> 프레임워크를 제대로 이해하고 있다면.
	   	
	=> 경량의 모듈로 개발이 가능
	
	=> 프레임워크에서 제공하는 모듈(xxxx.jar - 라이브러리, 기능)는 누가 어떤 시스템을 개발하더라도
	   바로 사용할 수 있는 검증받은 안정적이고 가벼운 모듈이다.
	
	   
	   
2. 스프링의 핵심 기능
	-DI
	-AOP
	-IoC컨테이너
	-스프링 웹 MVC
	-트랜젝션 , 커넥션 , 스케쥴러 , 다국어 , 메시징기반처리 ....
	
3. 스프링의 특징
	- 자바 기반의 프레임워크
	- 스프링은 oop특성을 잘 살려서 개발을 할 수 있도록 도와주는 프레임워크
	- 변경이 용이한 프로그램
		=> 기존 시스템을 구성하는 구성요소가 변경되더라도 유연하게 프로그램을 운영할 수 있는 프로그램
									--------------------------------------
								자바의 특징 - 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 언어(다형성)
									다형성
									
	- oop언어의 특징인 다형성을 극대화 시켜서 클래스를 설계할 수 있도록 도와준다.
	- 스프링이 제공하는 IoC컨테이너를 통해 필요한 객체를 전달받아 사용한다.
	  프로그램 내부에서 

1) 스프링을 잘 활용하기 위한 방법
	- oop특성을 잘 활용해서 개발
	- 상위인터페이스와 구현을 분리해서 개발해야 한다.
	(상위인터페이스를 만들고 상위인터페이스를 상속받아 클래스를 구현할 수 있도록 설계)

2) SOLID (객체지향언어를 이용해서 좋은 클래스를 설계하기 위한 5가지 원칙)
	1. SRP(Single Responsibility Principle) - 단일책임의 원칙
		=> 한 클래스는 하나의 책임(기능)만 적용할 수 있도록
	
	2. OCP(Open Close Principle) - 개방폐쇄의 원칙
		=> 소프트웨어는 확장(기능추가)에는 열려 있어야 하고 변경(기존에 잘 실행되고있는 프로그램은 변경이 되면 안된다.)
		에는 닫혀 있어야 한다.
		=> 다형성을 이용해서 인터페이스와 구현을 분리
						------------
							상위 인터페이스를 만들고 작업
	3. LSP
	
	4. ISP
	
	5. DIP (Dependency Inversion Principle) - 의존관계 역전의 원칙
		=> 개발을 할때 상위인터페이스에 의존해야 하며 즉, 상위인터페이스를 이용해서 개발할 수 있도록 작성
		=> 구현된 클래스(하위클래스)에 의존하면(사용하면) 안된다.
		
		EmpDAO dao = new EmpDAOImpl()
		

4. 실습
	1) 요구사항
		- 회원을 관리할 수 있다.
		- 회원을 등록할 수 있다.
		- 회원을 아이디로 조회할 수 있다.
		- 시스템을 사용하는 사용자들로 부터 발생하는 데이터를 저장하기 위해서 검토 중인 DB접근 방식
			* Mybatis
			* JPA
			* Spring JDBC
			
		- 모든 작업은 인터페이스와 구현을 분리(상위인터페이스를 작성하자)
		

5. IoC컨테이너의 사용
	=> DI와 DL을 제공
	1) DL(Dependency Lookup)
	=> 설정파일에 등록한 객체를 컨테이너가 제공하는 메소드를 이용해서 내부에 저장된 객체를 찾아오는 작업
	
	
	2) DI (Dependency Injection)
	=> 개발자가 스프링컨테이너로 부터 직접 객체를 찾아와서 사용하는 DL과 다르게 Spring컨테이너 내부에서 설정파일에
	등록된 객체를 직접 생성하고 내부에서 의존하고 있는 객체도 생성해서 연결시켜 주는 작업
	
	
6. 스프링컨테이너의 종류 ( 대표컨테이너 - 상위인터페이스 )
	BeanFactory				- 
		^
		|
	ApplicationContext		- 
		^
		|
	WebApplicationContext	- 웹 환경에서 사용


	
	

<<스프링 MVC 프로젝트 구성>>

[프로젝트 실습]
1. web.xml에 DispatcherServlet이 등록되어 있는지 확인
2. spring 프레임워크를 실행할 수 있도록 설정하기 위한 설정 파일은 기본이
	/WEB-INF/spring/appServlet/servlet-context.xml파일
	경로를 변경할 수 있다.
	경로나 파일명이 변경되면 web.xml파일에서 경로를 수정하면 된다.
	
3.view파일은 WEB-INF아래 원하는 폴더를 만들고 작업
	기본설정을 변경해야 한다.
	--------
	/WEB-INF/config/spring-config/xml
	
[스프링 MVC 아키텍쳐]
- 스프링 MVC는 역할을 분리
- 기본으로 frontController 패턴이 적용되어 있음

- DispatcherServlet : 클라이언트의 요청을 받아서 요청을 분석하고 MVC아키텍쳐 안의 구성 컴포넌트들을 호출해서 작업
- HandlerMapping 	 : DispatcherServlet이 전달해준 매핑정보(요청 path)를 이용해서 실행할 컨트롤러를 찾아서 DispatcherServlet에 전달
- HandlerAdapter	 : 컨트롤러를 실행하고 실행결과를 DispatcherServlet에 전달(ModelAndView객체 - 모델과 View의 정보)
- Controller 			 : 개발자가 웹에서 처리하고 싶은 내용을 기술 (서블릿에서 작업했던 내용을 컨트롤러에서 작업)
							    Action과 같은 역할
							    이전버전에서는 Controller가 되기 위해 상속받아야 하는 클래스와 인터페이스가 있었으나 3.0이후 버전부터는 어노테이션을 기반으로
							    컨트롤러로 인식함
							    실제로는 컨트롤러는 서비스를 호출하는 역할
							    
- ViewResolver		 : DispatcherServlet이 넘겨준 뷰의 정보를 기반으로 설정파일에서 어떤 뷰를 만들어야 하는지 정보를 찾아서 넘겨준다.
- View					 : 실제 응답할 뷰를 만들어 리턴


[미션]
	secondPro라는 spring mvc project 만들기
	com.multi.second.Pro
	스프링 설정파일 : WEB-INF/config/spring-config.xml로 수정
	라이브러리 : 스프링 4.2.4 , 자바 1.8
	
[컨트롤러]
1) spring mvc 프레임워크 안에서 웹을 서비스하기 위해서
    컨트롤러를 만들어야 한다.
2) 컨트롤러 라는 것을 프레임워크 내부에서 인식할 수 있도록 하려면
   컨트롤러 클래스를 상속하거나 @Controller로 클래스 위에서
   선언해주면서 내부에서 컴파일 될때 컨트롤러로 인식
   
3)	메소드를 정의하면 된다.
 	public String mymethod(){
 		
 	}
 	
 	1) 매개변수
 		허용되는 타입안에서 원하는 매개변수 타입을 정의
 	2) 리턴타입
 		허용되는 타입안에서 원하는 매개변수의 타입을 정의
 		String => 뷰의 정보만 리턴
 		ModelAndView => Model과 View의 정보를 같이 ModelAndView객체로 만들어서 리턴
 																			----------
 
 메소드 선언부 위에 매핑정보 정의
 RequestMapping
 
 
 [미션]
 -test패키지에 GuGUController 작성하기