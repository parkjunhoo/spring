1. tiles적용하기
   1) pom.xml에 라이브러리를 추가
   2) 템플릿파일을 만들고 각 영역을 설정
   	  => 템플릿이 될 jsp를 만들고 레이아웃을 정의한다.
      => tiles설정 파일에 등록한 영역이 실제 템플릿 파일의 어느 부분인지 jsp파일에서 등록하는 작업
   3) tiles설정파일을 만들어서 레이아웃(템플릿에 대한)을 등록하기
      => 템플릿을 등록
      => 뷰를 등록
      main-tiles.xml
   
   3) spring-config.xml에 설정
      => tiles를 기본으로 View를 만들 수 있도록 ViewResolver를 등록
      ① tiles설정 파일을 읽어서 작업할 수 있도록 설정파일을 등록
      ② tiles기반으로 뷰를 만들 수 있도록 ViewResolver등록
  
   5) 뷰등록하고 사용하기
   
2. Connection Pool
   1) 기존커넥션을 관리하는 방법
      => 요청이 들어오면 커넥션을 매번 직접 생성
      ① 커넥션을 요청
      ② 드라이버가 DB서버에 연결한다.
        => 연결하는 과정에서 3way handshake와 같은 네트워크 동작이 발생
        
      ③ 커넥션이 연결되면 계정과 계정 패스워드를 이용해서 내부적으로 인증작업을 수행한다.
      ④ 인증이 완료되면 sql을 사용할 수 있는 세션이 만들어진다.
        => 같은 세션인 경우만 트랜잭션이 가능
        
      ⑤ 디비서버가 생성된 커넥션 정보를 리턴  
      ⑥ 커넥션을 이용해서 SQL문을 실행
      
      
   2) 문제점
      - 매번 커넥션을 만들때마다 네트워크 접속이 발생하므로 리소스를 많이 사용
      
   3) Connection Pool
      - 해결하기 위해 동시간대 평균접속자수를 고려해서 커넥션을 미리 만들어서 관리하는 방법     
      - WAS가 시작될때 미리 만들어서 대기
                    ---------------
                        DB서버와 네트워크로 연결 
                        
      - 요청이 들어오면 커넥션풀에서 커넥션을 꺼내서 반환
      - SQL작업이 모두 끝나면 커넥션을 종료하지 않고 커넥션풀로 다시 반환  
      - commons-dbcp2, tomcat-jdbc pool, HikariCP(spring boot2.0부터 기본 포함)
         등 오픈소스를 사용한다.
      - WAS에서 제공되는 커넥션풀을 이용(유튜브참조) 
      - 커넥션풀마다 내부적으로 접근하는 방법이나 API가 다 다르므로 
        자바에서는 javax.sql.DataSource를 제공
                ---------------------------
                   커넥션을 얻는 방법을 추상화해놓은 인터페이스
      
   4) HikariCP설정
      ① HikariConfig
        => DB서버에 대한 정보를 설정
        => 드라이버, url, 계정, 계정패스워드
        => 커넥션풀에 대한 각종 설정
        
      ② HikariDataSource
        => HikariConfig를 기반으로 만들어진 커넥션풀에서 커넥션을 관리하는 객체
        => 기본설정이 커넥션을 10개 제공
   
   
3. DB접근기술
   1) SQLMapper
      - JdbcTemplate
      - Mybatis
      
      - 개발자가 SQL문을 작성하면 SQL의 결과를 객체로 편리하게 매핑해주는 작업을 수행
      - JDBC의 반복되거나 복잡한 부분을 내부에서 다 처리
   2) ORM   
      - JPA
   
   
4. mybatis설정
   => sql문을 분리해서 xml에 정의
   => 동적쿼리를 위한 기능을 제공(<if>,<where>,<foreach>....)
   1) pom.xml에 라이브러리 추가
      - mybatis라이브러리
      - spring과 mybatis를 연동하는 라이브러리   
   
   2) mybatis의 설정파일을 작성
      - mybatis의 전체 설정정보를 담고 있는 main설정파일
                                    --------------
                                       <!DOCTYPE configuration
  										PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  										"https://mybatis.org/dtd/mybatis-3-config.dtd">
  										
   3) 스프링설정파일에 mybatis와 관련된 라이브러리를 등록
      - SqlSessionFactoryBean을 등록
         => spring과 mybatis를 연결해주는 클래스
         => mybatis와 mysql의 연결을 관리
         
      - SqlSessionTemplate등록
         => mybatis의 핵심클래스
         => JdbcTemplate과 같이 sql을 실행할 수 있도록 기능을 제공
         
   4) mapper작성
      => sql문을 정의하는 xml파일
   
5. spring mvc
   1) 컨트롤러의 메소드
      => 허용된 범위에서 다양하게 매개변수나 리턴타입을 정의하고 사용할 수 있다.
      ① 매개변수  
        - String , XXXDTO, HttpServletRequest, HttpSession
        - Model : spring에서 사용하는 공유데이터를 저장할 수 있는 객체, 
                  컨트롤러가 요청되는 과정에서 자동으로 만들어서 메소드 호출하면서 전달
                  Map의 구조
                  request scope에서 저장할 수 있는 객체
      ② 리턴타입
        - String : View정보
        - ModelAndView : model(jsp에 공유할 데이터)과 view정보   
        - ResponseEntity<UrlResource> : 응답의 데이터를 관리하는 객체
                                        Http응답의 헤더,http응답의 바디, http응답의 상태정보....                                     
                                        HttpEntity의 하위객체
                                        HttpEntity는 Http의 요청과 응답을 관리하는 객체
                                         요청헤더, 바디, 응답헤더, 바디를 관리하는 객체
          UrlResource는 파일객체를 다루기 위해서 스프링내부에서 사용하는 객체
6. 파일업로드
   1단계 설정
        - pom.xml라이브러리 등록
        - spring-config에 CommonsMultipartResolver등록
                         -------------------------
                             id는 multipartResolver로 등록해야 한다.
        - 업로드될 폴더 생성(/WEB-INF/upload)
   2단계 파일업로드
        - 실제 업로드되는 서버의 위치가 필요
        - 업로드될 원본파일명과 중복되지 않도록 식별할 수 있는 파일명생성
        - 식별할 수 있는 파일명으로 업로드
        
   3단계 업로드되는 파일의 정보가 DBMS에 저장
        - 업로드될 파일정보가 저장될 테이블생성(O)
        - 테이블의 레코드를 DTO로 정의(O)
        - 업로드되는 파일의 정보를 DTO로 만들어서 ArrayList에 저장하기(O)
        - 컨트롤러에서 BoardDTO와 List<BoardFileDTO>를 서비스 넘기기
                    --------  --------------------
                    게시판에       게시글 하나에 첨부한 파일의 정보
                    일반적인텍스트
                    
           ===> 서비스는 게시판글등록 버튼을 누를때 호출되는 메소드이므로 1개의 메소드에 정의
           
        - DAO에 각각의 테이블의 데이터를 insert할 수 있도록 메소드를 2개 정의
          ====> 테이블이 다르고 실행할 SQL문이 다르면 sql문을 처리하는 메소드를 각각 만들어야 한다.
          
        - xml에 sql문 추가
        
        
         
   4단계 파일다운로드
      - 게시글상세보기에서 업로드된 파일의 정보를 확인
      - 업로드된 파일을 클릭하면 클라이언트PC로 다운로드
      
      
   1) HTML폼의 전송방식   
      ① application/x-www-form-urlencoded
        - html에서 폼 데이터를 서버로 전송하는 가장 기본적인 방법
        - 기존의 사용했던 방식
        - 폼에 입력한 데이터를 name=value&name=value...이런 방법으로 전송
        
      ② multipart/form-data
        - 파일업로드를 하기 위해서 텍스트(name=value...)와 바이너리데이터를 같이 전송할 수 있어야 한다.
        - 다른 형식의 폼데이터와 첨부파일의 데이터를 동시에 전송할 수 있는 방법
        - <form>태그의 enctype속성을 추가하고 설정
        - method는 무조건 post로 설정
   
   2) 파일업로드 
      - 뷰에 enctype속성 설정하기
      - pom.xml파일에 라이브러리 추가
      - spring-config에 파일업로드 기능이 처리될 수 있도록 등록
      - dto수정
      - 컨트롤러수정
      - 파일업로드 로직 추가
      
   3)MultipartFile
     - enctype을 multipart/form-data를 이용하는 경우 DispatcherServlet내부에서 파일업로드기능을 처리한다.
     - DispatcherServlet내부에서 파일업로드를 처리할 수 있는 "multipartResolver"라는 이름으로 등록된
       빈을 찾아서 파일업로드 기능을 수행한다. 따라서 빈의 id명이 틀리면 동작하지 않는다.
       
     - 파일데이터는 MultiPartFile객체를 만들어서 작업
     - 파일업로드에서 파일이 여러 개 업로드되는 경우
       <input type="file">인 폼데이터가 여러 개 있는 경우
       MultipartFile[]로 다루거나 List<MultipartFile>의 형태로 스프링이 만들어준다. 
       이 부분은 DTO에 어떻게 선언하느냐에 따라 달라진다.
       
   
7. 클라이언트에 데이터전송하기
   1) 정적리소스를 클라이언트 전달
     ---------
       js, css, html   
   
   2) SSR(서버사이드랜더링)
      - 동적으로 view를 작성해서 클라이언트에게 전달
      - 실행하면 DBMS에서 조회한 결과를 이용해서 HTML을 서버에서 생성해서 클라이언트로 전달
      - JSP, 타임리프
      
   3) CSR(클라이언트사이드랜더링)
      - DBMS에서 조회한 결과를 데이터만 클라이언트로 전송
      - 자바스크립트에서 전달받은 데이터를 필요한 부분에 출력될 수 있도록 뷰를 생성
        ----------
          DOM을 이용(DOM이 복잡하고 어렵기 때문에 jQuery를 주로 이용)
      - 데이터가 JSON으로 주로전달
      - 안드로이드에서도 데이터를 WAS에 요청해서 받을 수 있다.
      - 다른 서버로 데이터를 전달할 수 있다.
      - React, Vue.js
      
   4) CSR을 위해서 필요한 기술  
      - JSON(주로 전달되는 데이터 형식)
      - 자바스크립트에서 JSON데이터를 접근하는 방법
      - Ajax(서버로 데이터를 요청하기 위해 사용되는 기술)
      - 스프링에서 Ajax로 요청받아서 JSON데이터를 만들어서 response하는 방법
      - 자바스크립트(jQuery)에서 response받은 JSON데이터를 DOM을 이용해서 원하는 위치에 원하는 디자인으로
        출력하기 
      
   5) Ajax(Asynchronous Javascript and XML)       
      - 자바스크립트로 비동기통신을 요청
      - XMLHttpRequest객체가 비동기통신을 담당
      
   6) jQuery로 Ajax요청하기
      ① $.ajax()를 이용해서 ajax통신하기
        - jQuery의 메소드를 호출하면서 정의하는 매개변수들은 JSON형식으로 정의
        
        [매개변수]
   		url : ajax로 요청할 컨트롤러의 요청path
        type : 요청방식(get or post)
        data : 서버로 전송할 데이터(파라미터) - 서버로 보내서 처리할 데이터가 여러 개면 json으로 정의 
        datatype : ajax결과에 대한 타입 - text,json
        success : 서버와 통신이 성공했을때 호출되는 함수
        error : 서버와 통신이 실패했을때 호출되는 함수
   
   
   
   
   
   